{"ast":null,"code":"var _jsxFileName = \"/home/nick/dev/TAS_Meeting_System/frontend/src/components/DropdownButton.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n//import '../styles/dropbutton.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DropdownButton = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleOptionClick = option => {\n    // Handle option click logic here\n    console.log(`Option Clicked: ${option}`);\n    // Additional logic can be added here based on the selected option\n    // For example, you may want to close the dropdown after an option is selected\n    setIsOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"dropdown-button\",\n      onClick: toggleDropdown,\n      children: \"File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option\",\n        onClick: () => handleOptionClick('Option 1'),\n        children: \"Option 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option\",\n        onClick: () => handleOptionClick('Option 2'),\n        children: \"Option 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option\",\n        onClick: () => handleOptionClick('Option 3'),\n        children: \"Option 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(DropdownButton, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c = DropdownButton;\nexport default DropdownButton;\nvar _c;\n$RefreshReg$(_c, \"DropdownButton\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DropdownButton","_s","isOpen","setIsOpen","toggleDropdown","handleOptionClick","option","console","log","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nick/dev/TAS_Meeting_System/frontend/src/components/DropdownButton.jsx"],"sourcesContent":["import React, { useState } from 'react';\n//import '../styles/dropbutton.css';\n\nconst DropdownButton = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleOptionClick = (option) => {\n    // Handle option click logic here\n    console.log(`Option Clicked: ${option}`);\n    // Additional logic can be added here based on the selected option\n    // For example, you may want to close the dropdown after an option is selected\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"dropdown-container\">\n      <button className=\"dropdown-button\" onClick={toggleDropdown}>\n        File \n      </button>\n\n      {isOpen && (\n        <div className=\"dropdown\">\n          <div className=\"option\" onClick={() => handleOptionClick('Option 1')}>\n            Option 1\n          </div>\n          <div className=\"option\" onClick={() => handleOptionClick('Option 2')}>\n            Option 2\n          </div>\n          <div className=\"option\" onClick={() => handleOptionClick('Option 3')}>\n            Option 3\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DropdownButton;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMO,cAAc,GAAGA,CAAA,KAAM;IAC3BD,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAED,MAAMG,iBAAiB,GAAIC,MAAM,IAAK;IACpC;IACAC,OAAO,CAACC,GAAG,CAAE,mBAAkBF,MAAO,EAAC,CAAC;IACxC;IACA;IACAH,SAAS,CAAC,KAAK,CAAC;EAClB,CAAC;EAED,oBACEJ,OAAA;IAAKU,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACjCX,OAAA;MAAQU,SAAS,EAAC,iBAAiB;MAACE,OAAO,EAAEP,cAAe;MAAAM,QAAA,EAAC;IAE7D;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAERb,MAAM,iBACLH,OAAA;MAAKU,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvBX,OAAA;QAAKU,SAAS,EAAC,QAAQ;QAACE,OAAO,EAAEA,CAAA,KAAMN,iBAAiB,CAAC,UAAU,CAAE;QAAAK,QAAA,EAAC;MAEtE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNhB,OAAA;QAAKU,SAAS,EAAC,QAAQ;QAACE,OAAO,EAAEA,CAAA,KAAMN,iBAAiB,CAAC,UAAU,CAAE;QAAAK,QAAA,EAAC;MAEtE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNhB,OAAA;QAAKU,SAAS,EAAC,QAAQ;QAACE,OAAO,EAAEA,CAAA,KAAMN,iBAAiB,CAAC,UAAU,CAAE;QAAAK,QAAA,EAAC;MAEtE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACd,EAAA,CApCID,cAAc;AAAAgB,EAAA,GAAdhB,cAAc;AAsCpB,eAAeA,cAAc;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}